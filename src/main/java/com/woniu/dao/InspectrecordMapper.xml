<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.woniu.dao.InspectrecordMapper">
  <resultMap id="BaseResultMap" type="com.woniu.domain.Inspectrecord">
    <id column="recordId" jdbcType="INTEGER" property="recordid" />
    <result column="userId" jdbcType="INTEGER" property="userid" />
    <result column="roadId" jdbcType="INTEGER" property="roadid" />
    <result column="respectTime" jdbcType="DATE" property="respecttime" />
    <result column="isNormal" jdbcType="BIT" property="isnormal" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.woniu.domain.Inspectrecord">
    <result column="respectPeriod" jdbcType="VARBINARY" property="respectperiod" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    recordId, userId, roadId, respectTime, isNormal
  </sql>
  <sql id="Blob_Column_List">
    respectPeriod
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.woniu.domain.InspectrecordExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from inspectrecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.woniu.domain.InspectrecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from inspectrecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from inspectrecord
    where recordId = #{recordid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from inspectrecord
    where recordId = #{recordid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.woniu.domain.InspectrecordExample">
    delete from inspectrecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.woniu.domain.Inspectrecord">
    insert into inspectrecord (recordId, userId, roadId, 
      respectTime, isNormal, respectPeriod
      )
    values (#{recordid,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{roadid,jdbcType=INTEGER}, 
      #{respecttime,jdbcType=DATE}, #{isnormal,jdbcType=BIT}, #{respectperiod,jdbcType=VARBINARY}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.woniu.domain.Inspectrecord">
    insert into inspectrecord
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="recordid != null">
        recordId,
      </if>
      <if test="userid != null">
        userId,
      </if>
      <if test="roadid != null">
        roadId,
      </if>
      <if test="respecttime != null">
        respectTime,
      </if>
      <if test="isnormal != null">
        isNormal,
      </if>
      <if test="respectperiod != null">
        respectPeriod,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="recordid != null">
        #{recordid,jdbcType=INTEGER},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="roadid != null">
        #{roadid,jdbcType=INTEGER},
      </if>
      <if test="respecttime != null">
        #{respecttime,jdbcType=DATE},
      </if>
      <if test="isnormal != null">
        #{isnormal,jdbcType=BIT},
      </if>
      <if test="respectperiod != null">
        #{respectperiod,jdbcType=VARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.woniu.domain.InspectrecordExample" resultType="java.lang.Long">
    select count(*) from inspectrecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update inspectrecord
    <set>
      <if test="record.recordid != null">
        recordId = #{record.recordid,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null">
        userId = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.roadid != null">
        roadId = #{record.roadid,jdbcType=INTEGER},
      </if>
      <if test="record.respecttime != null">
        respectTime = #{record.respecttime,jdbcType=DATE},
      </if>
      <if test="record.isnormal != null">
        isNormal = #{record.isnormal,jdbcType=BIT},
      </if>
      <if test="record.respectperiod != null">
        respectPeriod = #{record.respectperiod,jdbcType=VARBINARY},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update inspectrecord
    set recordId = #{record.recordid,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      roadId = #{record.roadid,jdbcType=INTEGER},
      respectTime = #{record.respecttime,jdbcType=DATE},
      isNormal = #{record.isnormal,jdbcType=BIT},
      respectPeriod = #{record.respectperiod,jdbcType=VARBINARY}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update inspectrecord
    set recordId = #{record.recordid,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      roadId = #{record.roadid,jdbcType=INTEGER},
      respectTime = #{record.respecttime,jdbcType=DATE},
      isNormal = #{record.isnormal,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.woniu.domain.Inspectrecord">
    update inspectrecord
    <set>
      <if test="userid != null">
        userId = #{userid,jdbcType=INTEGER},
      </if>
      <if test="roadid != null">
        roadId = #{roadid,jdbcType=INTEGER},
      </if>
      <if test="respecttime != null">
        respectTime = #{respecttime,jdbcType=DATE},
      </if>
      <if test="isnormal != null">
        isNormal = #{isnormal,jdbcType=BIT},
      </if>
      <if test="respectperiod != null">
        respectPeriod = #{respectperiod,jdbcType=VARBINARY},
      </if>
    </set>
    where recordId = #{recordid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.woniu.domain.Inspectrecord">
    update inspectrecord
    set userId = #{userid,jdbcType=INTEGER},
      roadId = #{roadid,jdbcType=INTEGER},
      respectTime = #{respecttime,jdbcType=DATE},
      isNormal = #{isnormal,jdbcType=BIT},
      respectPeriod = #{respectperiod,jdbcType=VARBINARY}
    where recordId = #{recordid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.woniu.domain.Inspectrecord">
    update inspectrecord
    set userId = #{userid,jdbcType=INTEGER},
      roadId = #{roadid,jdbcType=INTEGER},
      respectTime = #{respecttime,jdbcType=DATE},
      isNormal = #{isnormal,jdbcType=BIT}
    where recordId = #{recordid,jdbcType=INTEGER}
  </update>
</mapper>